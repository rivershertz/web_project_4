!function(){"use strict";var e={d:function(t,o){for(var n in o)e.o(o,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:o[n]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}};e.d({},{JB:function(){return l},BV:function(){return L},O_:function(){return q}});class t{constructor(e,t){this._currentForm=t,this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._inputs=Array.from(this._currentForm.querySelectorAll(this._inputSelector)),this._submitButton=this._currentForm.querySelector(this._submitButtonSelector)}_showInputError(e,t,o){const n=e.querySelector(".".concat(t.id,"-input-error"));t.classList.add(this._inputErrorClass),n.textContent=o,n.classList.add(this._errorClass)}_hideInputError(e,t){const o=e.querySelector(".".concat(t.id,"-input-error"));t.classList.remove(this._inputErrorClass),o.textContent="",o.classList.remove(this._errorClass)}_toggleInputError(e,t){t.validity.valid?this._hideInputError(e,t):this._showInputError(e,t,t.validationMessage)}_hasInvalidInput(){return this._inputs.some((e=>!e.validity.valid))}toggleSubmitButton(){this._hasInvalidInput()?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(e){this._inputs.forEach((t=>{t.addEventListener("input",(()=>{this._toggleInputError(e,t),this.toggleSubmitButton()}))}))}enableValidation(){this._currentForm.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners(this._currentForm)}}function o(e){e.classList.add("popup_opened"),document.addEventListener("keydown",r)}function n(e){document.removeEventListener("keydown",r),e.classList.remove("popup_opened")}const r=e=>{"Escape"===e.code&&n(document.querySelector(".popup_opened"))};function i(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}class s{constructor(e,t){i(this,"_toggleLikeButton",(()=>{this._element.querySelector(".photos__like").classList.toggle("photos__like_active")})),i(this,"_removeCard",(()=>{this._element.remove(),this._element=null})),i(this,"_openImgPopup",(()=>{L.src=this._link,L.alt="picture of ".concat(this._text),q.textContent=this._text,o(l)})),this._text=e.name,this._link=e.link,this._templateSelector=t}_getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".photos__card").cloneNode(!0)}generateCard(){this._element=this._getTemplate();const e=this._element.querySelector(".photos__img");return e.src=this._link,this._element.querySelector(".photos__title").textContent=this._text,e.alt="picture of ".concat(this._text),this._setEventListeners(),this._element}_setEventListeners(){this._element.querySelector(".photos__like").addEventListener("click",this._toggleLikeButton),this._element.querySelector(".photos__remove").addEventListener("click",this._removeCard),this._element.querySelector(".photos__img").addEventListener("click",this._openImgPopup)}}const u={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__save",inactiveButtonClass:"popup__save_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},l=document.querySelector(".popup_image-popup"),c=document.querySelector(".popup_new-image"),p=document.querySelector(".popup_profile"),a=document.querySelector(".profile__name"),_=document.querySelector(".profile__subtitle"),d=document.querySelector(".profile__edit"),m=document.querySelector(".profile__add"),h=document.querySelector(".popup__close_profile"),v=document.querySelector(".popup__close_image"),y=document.querySelector(".popup__name"),S=document.querySelector(".popup__about"),g=document.querySelector(".popup__input_url"),b=document.querySelector(".popup__input_title"),f=document.querySelector(".popup__close_image-popup"),E=[...document.querySelectorAll(".popup")],L=document.querySelector(".popup__img_image-popup"),q=document.querySelector(".popup__title_image-popup"),k=document.querySelector(".photos__list"),C=c.querySelector(".popup__form");function B(e){const t=new s(e,"#card-template").generateCard();k.prepend(t)}p.addEventListener("submit",(function(e){e.preventDefault(),a.textContent=y.value,_.textContent=S.value,n(p)})),c.addEventListener("submit",(function(e){e.preventDefault(),B({name:b.value,link:g.value}),n(c),C.reset(),x.toggleSubmitButton()})),d.addEventListener("click",(()=>{w.toggleSubmitButton(),y.value=a.textContent,S.value=_.textContent,o(p)})),h.addEventListener("click",(()=>n(p))),m.addEventListener("click",(()=>{x.toggleSubmitButton(),o(c)})),v.addEventListener("click",(()=>n(c))),f.addEventListener("click",(()=>n(l))),[{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"}].forEach((e=>{B(e)})),E.forEach((e=>{e.addEventListener("mousedown",(t=>{t.target.matches(".popup")&&n(e)}))}));const x=new t(u,c);x.enableValidation();const w=new t(u,p);w.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,